# Cline Rules for Dippy Speech Subnet

## Project Patterns

### Directory Structure
- Main project components are organized in top-level directories
- Each component has its own requirements file
- Docker configurations are at root level
- Common utilities shared across services

### Code Organization
- Scoring logic isolated in scoring/scoring_logic/
- Prompt templates in scoring/prompt_templates/
- API implementation in voice_validation_api/
- Shared utilities in common/ and utilities/

### Implementation Patterns
1. Service Isolation
   - Each service has dedicated Dockerfile
   - Services communicate through defined interfaces
   - Independent scaling and deployment

2. Resource Management
   - Queue-based processing
   - Worker management
   - Distributed validation

## Critical Paths

### Scoring System
1. Template Selection
   - Model-specific templates in prompt_templates/
   - Template matching based on model type
   - Standardized processing flow

2. Validation Flow
   - API request handling
   - Queue management
   - Result processing
   - Score generation

### Processing Pipeline
1. Model Queue
   - Queue management in neurons/
   - Miner coordination
   - Validator assignment

2. Result Handling
   - Score calculation
   - Result persistence
   - Status tracking

## Tool Usage Patterns

### Docker Management
- Use docker-compose for local development
- Service-specific Dockerfiles
- Environment configuration through compose files

### Database Operations
- PostgreSQL for persistence
- Migration management
- Registry tracking

### Testing Approach
- Unit tests per component
- API testing through test_api.py
- Integration testing via Docker Compose

## Project Evolution

### Documentation Strategy
- Memory bank for project context
- Technical documentation in code
- API documentation
- Implementation guides

### Development Workflow
1. Code Changes
   - Component isolation
   - Interface consistency
   - Error handling
   - Testing coverage

2. Deployment Process
   - Container building
   - Service orchestration
   - Environment configuration

## Known Challenges

### Performance
- Resource utilization in distributed processing
- Queue optimization
- Scaling considerations

### Integration
- Service communication
- Data consistency
- Error propagation

### Maintenance
- Service updates
- Database migrations
- System monitoring

## User Preferences

### Development
- Docker-based development environment
- Component isolation
- Clear documentation
- Comprehensive testing

### Operations
- Efficient resource usage
- Reliable processing
- Consistent validation
- Accurate scoring

## Best Practices

### Code Quality
- Clear component separation
- Comprehensive error handling
- Thorough documentation
- Test coverage

### System Design
- Microservices architecture
- Queue-based processing
- Distributed validation
- Scalable infrastructure

### Maintenance
- Regular updates
- Performance monitoring
- Error tracking
- System optimization
